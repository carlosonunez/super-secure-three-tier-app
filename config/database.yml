---
# Tasks shamelessly stolen from: https://gist.github.com/greenhat/11785194cbdc90624b67
- name: Configure database
  hosts: all
  gather_facts: false
  remote_user: "{{ login_user }}"
  tasks:
    - name: Install PostgreSQL and acl (so that Ansible can configure a db user)
      become: true
      apt:
        update_cache: true
        name:
          - "postgresql-{{ postgres_version }}"
          - libpq-dev
          - python3-dev
          - python3-psycopg2
          - python3-pip
          - acl
        state: present

    - name: Install AWS CLI
      pip:
        name: awscli

    - name: Allow connectivity on all interfaces
      become: true
      lineinfile:
        dest: /etc/postgresql/{{ postgres_version }}/main/postgresql.conf
        regexp: "listen_addresses ="
        line: "listen_addresses = '*'"
        state: present

    - become: true
      lineinfile:
        dest: /etc/postgresql/{{ postgres_version }}/main/pg_hba.conf
        line: "{{ item }}"
        state: present
      with_items:
        - "host    all             all              0.0.0.0/0                       md5"
        - "host    all             all              ::/0                            md5"

    - name: Set password for postgres user
      become: true
      become_user: postgres
      command: psql -c "ALTER USER postgres PASSWORD '{{ db_password }}'"

    - name: Create user
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"

    - name: Create app database
      become: true
      become_user: postgres
      postgresql_db:
        owner: "{{ db_user }}"
        name: "{{ db_name }}"

    - name: Create backup script
      become: true
      copy:
        dest: /usr/local/bin/backup_database.sh
        mode: 0755
        owner: "{{ login_user }}"
        content: |-
          #!/usr/bin/env bash
          set -euo pipefail
          fname="/tmp/db-$(date +%s).backup"
          sudo -u postgres pg_dumpall > "$fname"
          /home/{{ login_user }}/.local/bin/aws s3 cp "$fname" s3://{{ db_backup_bucket_name }}

    - name: Create a cron job for the backup script
      become: true
      cron:
        minute: 0
        name: Backup database
        job: /usr/local/bin/backup_database.sh

    - name: Restart Postgres
      become: true
      service:
        name: postgresql
        state: restarted
