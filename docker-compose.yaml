---
volumes:
  tf-data: {}
  infra-secrets: {}
  infra-extra-files: {}
services:
  terraform:
    build:
      dockerfile: terraform.Dockerfile
      context: .
    volumes:
      - $PWD/infra:/infra
      - tf-data:/tf-data
    working_dir: /infra
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_REGION
      - AWS_DEFAULT_REGION
      - TERRAFORM_STATE_S3_BUCKET
      - TERRAFORM_STATE_S3_KEY
      - TF_DATA_DIR=/tf-data
      - TF_IN_AUTOMATION="true"
  configure-infra:
    build:
      dockerfile: ansible.Dockerfile
      context: .
    volumes:
      - infra-secrets:/secrets
      - infra-extra-files:/extras
      - $PWD/config:/config
    environment:
      - ANSIBLE_HOST_KEY_CHECKING=false
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_REGION
      - AWS_DEFAULT_REGION
      - POSTGRES_VERSION
    entrypoint: sh
    command:
      - -c
      - |
        mkdir -p ~/.kube &&
        cp /secrets/kubeconfig ~/.kube/config &&
        ansible-playbook -i $(cat /secrets/db_host), \
          -e login_user=$(cat /secrets/db_user) \
          -e db_user=$(cat /secrets/db_db_user) \
          -e db_password=$(cat /secrets/db_db_password) \
          -e db_name=$(cat /secrets/db_name) \
          -e db_backup_bucket_name=$(cat /secrets/db_backup_bucket) \
          -e cluster_autoscaler_role_arn=$(cat /secrets/cluster_autoscaler_role_arn) \
          --private-key /secrets/db_key \
          --extra-vars @/config/vars.yaml \
          /config/all.yaml
  deploy-app:
    depends_on:
      refresh-eks-kubeconfig:
        condition: service_completed_successfully
    build:
      dockerfile: ansible.Dockerfile
      context: .
    volumes:
      - infra-secrets:/secrets
      - infra-extra-files:/extras
      - $PWD/config:/config
      - $PWD/chart:/chart
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TASKY_REPO_URL
      - TASKY_REPO_VERSION
      - ANSIBLE_HOST_KEY_CHECKING=false
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_REGION
      - AWS_DEFAULT_REGION
    entrypoint: sh
    command:
      - -c
      - |
        mkdir -p ~/.kube &&
        cp /secrets/kubeconfig ~/.kube/config &&
        ansible-playbook \
          -e ecr_repository_host=$(cat /secrets/ecr_repository_host) \
          -e ecr_repository_username=$(cat /secrets/ecr_repository_username) \
          -e ecr_repository_password=$(cat /secrets/ecr_repository_password) \
          -e tasky_repo="$TASKY_REPO_URL" \
          -e tasky_version="$TASKY_VERSION" \
          -e db_user=$(cat /secrets/db_db_user) \
          -e db_password=$(cat /secrets/db_db_password) \
          -e db_name=$(cat /secrets/db_name) \
          -e db_host=$(cat /secrets/db_host) \
          /config/app.yaml
  test:
    build:
      dockerfile: bats.Dockerfile
      context: .
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_REGION
      - AWS_DEFAULT_REGION
    volumes:
      - infra-secrets:/secrets
      - $PWD/tests:/tests
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - /tests
  terraform-init:
    depends_on:
      ensure-required-env-vars-set:
        condition: service_completed_successfully
      ensure-logged-into-aws:
        condition: service_completed_successfully
      create-tf-state-bucket:
        condition: service_completed_successfully
    image: hashicorp/terraform:1.7.5
    volumes:
      - $PWD/infra:/infra
      - tf-data:/tf-data
    working_dir: /infra
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_REGION
      - AWS_DEFAULT_REGION
      - REINIT
      - TERRAFORM_STATE_S3_BUCKET
      - TERRAFORM_STATE_S3_KEY
      - TF_DATA_DIR=/tf-data
      - TF_IN_AUTOMATION="true"
    entrypoint: sh
    command:
      - -c
      - |-
        { test -z "$REINIT" && test -f "/tf-data/.initialized"; } && exit 0
        terraform init  \
          -backend-config=bucket=$TERRAFORM_STATE_S3_BUCKET \
          -backend-config=key=$TERRAFORM_STATE_S3_KEY \
          -backend-config=region=$AWS_REGION && touch /tf-data/.initialized
  ensure-logged-into-aws:
    image: amazon/aws-cli:2.2.9
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_DEFAULT_REGION
      - TERRAFORM_STATE_S3_BUCKET
    entrypoint: sh
    command:
      - -c
      - "aws sts get-caller-identity &>/dev/null"
  create-tf-state-bucket:
    image: amazon/aws-cli:2.2.9
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_DEFAULT_REGION
      - TERRAFORM_STATE_S3_BUCKET
    entrypoint: sh
    command:
      - -c
      - |-
        aws s3 ls s3://$TERRAFORM_STATE_S3_BUCKET || aws s3 mb s3://$TERRAFORM_STATE_S3_BUCKET
  ensure-required-env-vars-set:
    image: bash:5
    environment:
      - TERRAFORM_STATE_S3_BUCKET
      - TERRAFORM_STATE_S3_KEY
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_DEFAULT_REGION
    command:
      - -c
      - |-
        for required in TERRAFORM_STATE_S3_BUCKET TERRAFORM_STATE_S3_KEY \
          AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_DEFAULT_REGION;
        do \
          set -x
          if test -z "$${!required}"
          then
            >&2 echo "ERROR: Please define $$required"
            exit 1
          fi
        done
  refresh-eks-kubeconfig:
    image: amazon/aws-cli:2.2.9
    volumes:
      - infra-secrets:/secrets
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_DEFAULT_REGION
    entrypoint: sh
    command:
      - -c
      - |-
        aws eks update-kubeconfig --name $(cat /secrets/eks_cluster_name) &&
        sed -i 's/v1alpha1/v1beta1/' ~/.kube/config &&
        cp ~/.kube/config /secrets/kubeconfig
  write-infra-secrets:
    build:
      dockerfile: terraform.Dockerfile
      context: .
    volumes:
      - $PWD/infra:/infra
      - tf-data:/tf-data
      - infra-secrets:/secrets
    working_dir: /infra
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - AWS_REGION
      - AWS_DEFAULT_REGION
      - TERRAFORM_STATE_S3_BUCKET
      - TERRAFORM_STATE_S3_KEY
      - TF_DATA_DIR=/tf-data
      - TF_IN_AUTOMATION="true"
    entrypoint: sh
    # TODO: DRY this up.
    command:
      - -c
      - |-
        set -x
        json=$(terraform output -json)
        echo "$$json" | jq -r '.wiz_interview_db_ssh_private_key.value' >  /secrets/db_key && chmod 600 /secrets/db_key &&
        echo "$$json" | jq -r '.wiz_interview_db_dns_record.value' >  /secrets/db_host &&
        echo "$$json" | jq -r '.wiz_interview_db_login_user.value' >  /secrets/db_user &&
        echo "$$json" | jq -r '.wiz_interview_db_db_user.value' >  /secrets/db_db_user &&
        echo "$$json" | jq -r '.wiz_interview_db_name.value' >  /secrets/db_name &&
        echo "$$json" | jq -r '.wiz_interview_db_db_password.value' >  /secrets/db_db_password &&
        echo "$$json" | jq -r '.wiz_interview_db_backup_bucket.value' >  /secrets/db_backup_bucket &&
        echo "$$json" | jq -r '.wiz_interview_test_machine_ssh_private_key.value' >  /secrets/test_machine_key && chmod 600 /secrets/test_machine_key &&
        echo "$$json" | jq -r '.wiz_interview_test_machine_dns_record.value' >  /secrets/test_machine_host &&
        echo "$$json" | jq -r '.wiz_interview_test_machine_login_user.value' >  /secrets/test_machine_user &&
        echo "$$json" | jq -r '.wiz_interview_test_machine_private_ip.value' >  /secrets/test_machine_private_ip &&
        echo "$$json" | jq -r '.wiz_interview_eks_cluster_name.value' >  /secrets/eks_cluster_name &&
        echo "$$json" | jq -r '.wiz_interview_eks_cluster_autoscaler_role_arn.value' >  /secrets/cluster_autoscaler_role_arn
        echo "$$json" | jq -r '.wiz_interview_ecr_repository_host.value' >  /secrets/ecr_repository_host &&
        echo "$$json" | jq -r '.wiz_interview_ecr_repository_username.value' >  /secrets/ecr_repository_username &&
        echo "$$json" | jq -r '.wiz_interview_ecr_repository_password.value' >  /secrets/ecr_repository_password
  delete-infra-secrets:
    image: bash:5
    volumes:
      - infra-secrets:/secrets
    command:
      - -c
      - rm -f /secrets/*
  ssh-into-db:
    build:
      dockerfile: ansible.Dockerfile
      context: .
    volumes:
      - infra-secrets:/secrets
    entrypoint: sh
    command:
      - -c
      - |-
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i /secrets/db_key \
          $(cat /secrets/db_user)@$(cat /secrets/db_host)
